- is_author = current_user?(@listing.author)
- is_marketplace_admin = Maybe(@current_user).has_admin_rights_in?(@current_community).or_else(false)
- is_authorized = is_author || is_marketplace_admin

- if @listing.closed?
  .listing-view-admin-links
    .listing-view-admin-link
      .icon-with-text-container
        = icon_tag("lock", ["icon-part"])
        .text-part= t("listings.reply_link.listing_closed")
    - if is_authorized
      .listing-view-admin-link
        %a.action-link{href: edit_listing_path(@listing)}
          .icon-with-text-container
            = icon_tag("unlock", ["icon-part"])
            .text-part= t("listings.edit_links.reopen_listing")
- else

  - if is_author
    = render partial: "delivery_opts", locals: { delivery_opts: delivery_opts, is_author: is_author }
  - else

    = form_tag form_path, :method => :get, :id => "booking-dates" do

      - # Currently we show the selectors only for preauth process.
      - # However, there has been a plan to introduce these in other
      - # Processes (free) as well - rap1ds, 2.6.2015
      - if process != :postpay
        - if @listing.unit_type == :day
          - days = [:sunday, :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday]
          - months = [:january, :february, :march, :april, :may, :june, :july, :august, :september, :october, :november, :december]
          - translated_days = days.map { |day_symbol| t("datepicker.days.#{day_symbol}") }.to_json
          - translated_days_short = days.map { |day_symbol| t("datepicker.days_short.#{day_symbol}") }.to_json
          - translated_days_min = days.map { |day_symbol| t("datepicker.days_min.#{day_symbol}") }.to_json
          - translated_months = months.map { |day_symbol| t("datepicker.months.#{day_symbol}") }.to_json
          - translated_months_short = months.map { |day_symbol| t("datepicker.months_short.#{day_symbol}") }.to_json

          - content_for :extra_javascript do
            :javascript
              $.fn.datepicker.dates['#{I18n.locale}'] = {
                days: #{translated_days},
                daysShort: #{translated_days_short},
                daysMin: #{translated_days_min},
                months: #{translated_months},
                monthsShort: #{translated_months_short},
                today: "#{t("datepicker.today")}",
                weekStart: #{t("datepicker.week_start", default: 0)},
                clear: "#{t("datepicker.clear")}",
                format: "#{t("datepicker.format")}"
              }

              $("#booking-dates").validate({
                submitHandler: function(form) {
                  var $form = $(form);
                  $form.find("#start-on").attr("name", "");
                  $form.find("#end-on").attr("name", "");

                  form.submit();
                }
              });

              window.ST.initializeFromToDatePicker('datepicker');
          .input-daterange.input-group.clearfix#datepicker{:data => {:locale => I18n.locale, :dateformat => t("datepicker.format")}}
            .datepicker-start-wrapper
              = label_tag t(".booking_from")
              %input.input-sm.form-control.required#start-on{:type => 'text', :name => "start_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-start-output" } }
              %input#booking-start-output{:type => 'hidden', :name => 'start_on'}

            .datepicker-end-wrapper
              = label_tag t(".booking_to")
              %input.input-sm.form-control.required#end-on{:type => 'text', :name => "end_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-end-output" }}
              %input#booking-end-output{:type => 'hidden', :name => 'end_on'}
        - elsif listing_unit_type.present?
          - delivery_type = delivery_opts.length > 0 ? delivery_opts.first[:name].to_s : ""
          - shipping_price_additional = delivery_opts.length > 0 ? delivery_opts.first[:shipping_price_additional] : nil
          - content_for :extra_javascript do
            :javascript
              $("#booking-dates").validate({
                errorPlacement: function(error, element) {
                  if (element.is("#quantity")) {
                    error.insertAfter(".quantity-wrapper");
                  } else {
                    error.insertAfter(element);
                  }
                }
              });
              window.ST.initializeQuantityValidation({validate: "positiveIntegers", input: "quantity", errorMessage: "#{t("errors.messages.positive_number")}" });
              if ("#{delivery_type}" == "shipping" && #{shipping_price_additional != nil}) {
                window.ST.initializeShippingPriceTotal('#quantity', '.delivery-price-value', '#{Maybe(delivery_opts)[0][:price].currency.decimal_mark.or_else(".")}');
              }

          .quantity-wrapper.input-group.clearfix
            .quantity-label-wrapper
              %label.quantity-label{for: 'quantity'}
                = ListingViewUtils.translate_quantity(@listing.unit_type, @listing.unit_selector_tr_key)
            .quantity-input.input-sm.required
              %input#quantity{type: 'number', placeholder: t("listings.quantity_placeholder"), name: 'quantity', value: 1, min: 1, step: 1}

      = render partial: "delivery_opts", locals: { delivery_opts: delivery_opts, is_author: is_author }

      = hidden_field_tag(:listing_id, @listing.id)

      - if @listing.quantity_available == 0
        Unavailable, contact the owner!
      - else
        %p
          = @listing.quantity_available 
          available
        %button.book-button
          .content
            = action_button_label(@listing)

    - if payment_gateway == :paypal && process != :none
      .row
        .col-12
          = render :partial => "listing_conversations/paypal_payment_methods", locals: { country_code: country_code }

  - if is_authorized
    .listing-view-admin-links
      .listing-view-admin-link
        %a.icon-with-text-container{href: edit_listing_path(@listing)}
          = icon_tag("edit", ["icon-part"])
          .text-part= t("listings.edit_links.edit_listing")
      .listing-view-admin-link
        %a.icon-with-text-container{href: close_person_listing_path(@current_user, @listing), data: { method: "put", remote: "true"}}
          = icon_tag("lock", ["icon-part"])
          .text-part= t("listings.edit_links.close_listing")

      - if is_marketplace_admin
        .listing-view-admin-link
          = link_to move_to_top_person_listing_path(@current_user, @listing), data: { method: "put" } do
            .icon-with-text-container
              = icon_tag("star", ["icon-part"])
              .text-part= t("listings.edit_links.move_to_top")

        .listing-view-admin-link
          = link_to show_in_updates_email_person_listing_path(@current_user, @listing), data: { method: "put", remote: "true" }, :id => "add-to-updates-email"  do
            .icon-with-text-container
              = icon_tag("mail", ["icon-part"])
              .text-part#add-to-updates-email-text{data: {:"action-loading" => t("listings.edit_links.show_in_updates_email_loading"), :"action-error" => t("listings.edit_links.show_in_updates_email_error"), :"action-success"=> t("listings.edit_links.show_in_updates_email_success")}}= t("listings.edit_links.show_in_updates_email")
